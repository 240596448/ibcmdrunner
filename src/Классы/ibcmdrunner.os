#Использовать logos
#Использовать v8find
#Использовать asserts
#Использовать 1commands

Перем Лог;
Перем ПутьКПриложению;
Перем ЭтоWindows;

Перем ПараметрыЗапуска;         // Массив параметров запуска команды
Перем ПараметрыСервернойИБ;     // Массив параметров серверной информационной базы 
Перем ПараметрыФайловойИБ;      // Массив параметров файловой информационной базы
Перем ПараметрыАвторизацииИБ;   // Массив параметров авторизации информационной базы
       
Перем Версия;                   // Версия платформы 1С

#Область Программный_интерфейс

// Устанавливает и возвращает путь к файлу приложения
// Параметры:
//  Путь - Строка - путь к файлу приложения
// Возвращаемое значение:
//   Строка - текущий путь к приложению
//
Функция ПутьКПриложению(Знач Путь = Неопределено) Экспорт
    
    Если Путь <> Неопределено Тогда
        Ожидаем.Что(Путь).ИмеетТип("Строка");
        ПутьКПриложению = Путь;
    КонецЕсли;    
    Возврат ПутьКПриложению;
КонецФункции  

// Установить параметры запуска для клиент-серверной информационной базы
// Параметры:
//  ТипСУБД - Строка - Тип СУБД. Допускаются значения
//          MSSQLServer - Microsoft SQL Server;
//        	PostgreSQL - PostgreSQL;
//        	IBMDB2 - IBM DB2;
//        	OracleDatabase - Oracle Database.
//        
//  СерверСУБД - строка - Имя сервера СУБД;
//  ИмяБД - Строка - Имя базы данных в СУБД;
//  ПользовательБД - Строка - Имя пользователя СУБД;
//  ПарольБД - Строка - Пароль пользователя в БД;
Процедура УстановитьПараметрыСервернойИБ(
    Знач ТипСУБД,
    Знач СерверСУБД,
    Знач ИмяБД,
    Знач ПользовательБД,
    Знач ПарольБД) Экспорт

    ПараметрыФайловойИБ.Очистить();
    ПараметрыСервернойИБ.Очистить();

    Ожидаем.Что(СтрНайти("mssqlserver,postgresql,ibmdb2,oracledatabase", НРег(ТипСУБД)) > 0).ЭтоИстина();

    ПараметрыСервернойИБ.Добавить(СтрШаблон("--dbms=%1", ТипСУБД));
    ПараметрыСервернойИБ.Добавить(СтрШаблон("--db-server=%1", СерверСУБД));
    ПараметрыСервернойИБ.Добавить(СтрШаблон("--db-name=%1", ИмяБД));
    ПараметрыСервернойИБ.Добавить(СтрШаблон("--db-user=%1", ПользовательБД));
    ПараметрыСервернойИБ.Добавить(СтрШаблон("--db-pwd=%1", ПарольБД));

КонецПроцедуры  

// Установить параметры запуска для файловой информационной базы
// Параметры:
//  КаталогИБ - Строка - Путь к файловой информационной базе;
Процедура УстановитьПараметрыФайловойИБ(Знач КаталогИБ) Экспорт

    ПараметрыСервернойИБ.Очистить();
    ПараметрыФайловойИБ.Очистить();

    ПараметрыФайловойИБ.Добавить("--db-path=" + ОбернутьВКавычки(КаталогИБ));
    Сообщить(ПараметрыФайловойИБ[0]);
КонецПроцедуры   

// Установить параметры авторизации информационной базы
// Параметры:
//  ПользовательИБ - Строка - имя пользователя информационной базы
//  ПарольИБ - Строка - пароль пользователя информационной базы
Процедура УстановитьПараметрыАвторизацииИБ(
    Знач ПользовательИБ,
    Знач ПарольИБ) Экспорт

    ПараметрыАвторизацииИБ.Очистить();

    Если СравнитьВерсии(Версия, "8.3.18.1563") > 0 Тогда
        ДобавитьПараметрЕслиЗаполнен("--user", ПользовательИБ);
        ДобавитьПараметрЕслиЗаполнен("--password", ПарольИБ);
    КонецЕсли;

КонецПроцедуры    

// Создать информационную базу из файла выгрузки.
// Для команды автоматом устанавливаются параметры "--create-database" и "--force"
// Параметр "--apply" не устанавливается, предполагается использование отдельной команды
// Параметры:
//  ПутьКФайлувыгрузки - Строка - Путь к файлу выгрузки информационной базы
//  Локаль - Строка - имя локали 
//  СмещениеДат - Число - Смещение дат в годах (имеет смысл только для MSSQL)
Процедура СоздатьИБИзФайлаВыгрузки(
    Знач ПутьКФайлуВыгрузки,
    Знач Локаль = Неопределено,
    Знач СмещениеДат = 2000) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase create");
    
    ДобавитьОбщиеПараметрыИБ();

    ДобавитьПараметрЕслиЗаполнен("--locale", Локаль);
    ДобавитьПараметрЕслиЗаполнен("--date-offset", СмещениеДат, 2000);
    ПараметрыЗапуска.Добавить("--create-database");
    
    ДобавитьПараметрЕслиЗаполнен("--restore", ПутьКФайлуВыгрузки, "");
   
    ПараметрыЗапуска.Добавить("--force");
    
    ВыполнитьКоманду();
КонецПроцедуры

// Создать информационную базу из файла конфигурации.
// Для команды автоматом устанавливаются параметры "--create-database" и "--force"
// Параметр "--apply" не устанавливается, предполагается использование отдельной команды
// Параметры:
//  ПутьКФайлуКонфигурации - Строка - Путь к файлу конфигурации информационной базы
//  Локаль - Строка - имя локали 
//  СмещениеДат - Число - Смещение дат в годах (имеет смысл только для MSSQL)
Процедура СоздатьИБИзФайлаКонфигурации(
    Знач ПутьКФайлуКонфигурации,
    Знач Локаль = Неопределено,
    Знач СмещениеДат = 2000) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase create");
        
    ДобавитьПараметрЕслиЗаполнен("--locale", Локаль);
    ДобавитьПараметрЕслиЗаполнен("--date-offset", СмещениеДат, 2000);
    ПараметрыЗапуска.Добавить("--create-database");
    
    ДобавитьПараметрЕслиЗаполнен("--load", ПутьКФайлуКонфигурации, "");
   
    ПараметрыЗапуска.Добавить("--force");
    
    ВыполнитьКоманду();
КонецПроцедуры

// Создать информационную базу из файлов конфигурации.
// Для команды автоматом устанавливаются параметры "--create-database" и "--force"
// Параметр "--apply" не устанавливается, предполагается использование отдельной команды
// Параметры:
//  ПутьККаталогуВыгрузки - Строка - Путь к каталогу выгрузки конфигурации в файлы
//  Локаль - Строка - имя локали 
//  СмещениеДат - Число - Смещение дат в годах (имеет смысл только для MSSQL)
Процедура СоздатьИБИзФайловКонфигурации(
    Знач ПутьККаталогуВыгрузки,
     Знач Локаль = Неопределено,
     Знач СмещениеДат = 2000) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase create");
       
    ДобавитьПараметрЕслиЗаполнен("--locale", Локаль);
    ДобавитьПараметрЕслиЗаполнен("--date-offset", СмещениеДат, 2000);
    ПараметрыЗапуска.Добавить("--create-database");
    
    ДобавитьПараметрЕслиЗаполнен("--import", ПутьККаталогуВыгрузки, "");
   
    ПараметрыЗапуска.Добавить("--force");
    
    ВыполнитьКоманду();
КонецПроцедуры

// Выгрузить данные из информационной базы
// Параметры:
//  ПутьКФайлуВыгрузки - Строка - Путь к файлу выгрузки
Процедура ВыгрузитьДанныеИБ(Знач ПутьКФайлуВыгрузки) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase dump");
           
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКФайлуВыгрузки));

    ВыполнитьКоманду();
КонецПроцедуры

// Загрузить данные из файла выгрузки
// Автоматом добавляется параметр "--create-database"
// Параметры:
//  ПутьКФайлуВыгрузки - Строка - Путь к файлу выгрузки
Процедура ЗагрузитьДанныеИБ(Знач ПутьКФайлуВыгрузки) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase restore");
    
    //ПараметрыЗапуска.Добавить("--create-database");
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКФайлуВыгрузки));

    ВыполнитьКоманду();

КонецПроцедуры

// Очистить информационную базу
Процедура ОчиститьИБ() Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase clear");
         
    ВыполнитьКоманду();

КонецПроцедуры

// Загрузить конфигурацию из файла
// Параметры:
//  ПутьКФайлуКонфигурации - Строка - Путь к файлу конфигурации
//  ИмяРасширения -Строка - Имя расширения. Если не заполнено, то будет загружена
//      основная конфигурация
Процедура ЗагрузитьКонфигурацию(Знач ПутьКФайлуКонфигурации, Знач ИмяРасширения = "") Экспорт

    НачатьЗаполнениеПараметровЗапуска("infobase config load");
        
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    ПараметрыЗапуска.Добавить("--force");
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКФайлуКонфигурации));

    ВыполнитьКоманду();
КонецПроцедуры

// Выгрузить конфигурацию базы данных в файл
// Параметры:
//  ПутьКФайлуКонфигурации - Строка - Путь к файлу конфигурации
//  ИмяРасширения - Строка - Имя расширения. Если не заполнено, то будет выгружена
//      конфигурация БД или основная конфигурация (см. следующий параметр)
//  ВыгружатьОсновнуюКонфигурацию - Булево - Если Истина, то будет выгружена основная
//      конфигурация
Процедура ВыгрузитьКонфигурациюВФайл(
    Знач ПутьКФайлуКонфигурации,
    Знач ИмяРасширения = "",
    Знач ВыгружатьОсновнуюКонфигурацию = ЛОЖЬ) Экспорт

    НачатьЗаполнениеПараметровЗапуска("infobase config save");
           
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    ПараметрыЗапуска.Добавить("--force");
    Если ВыгружатьОсновнуюКонфигурацию Тогда
        ПараметрыЗапуска.Добавить("--staging");
    КонецЕсли;    
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКФайлуКонфигурации));

    ВыполнитьКоманду();
КонецПроцедуры

// Проверить конфигурацию
// Параметры:
//  ИмяРасширения - Строка - имя расширения
Процедура ПроверитьКонфигурацию(Знач ИмяРасширения = "") Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config check");
      
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    ПараметрыЗапуска.Добавить("--force");
    ВыполнитьКоманду();
КонецПроцедуры    

// Обновить конфигурацию
// Параметры:
//  ИмяРасширения - Строка - имя расширения
Процедура ОбновитьКонфигурациюБазыДанных(Знач ИмяРасширения = "") Экспорт

    НачатьЗаполнениеПараметровЗапуска("infobase config apply");
       
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    ПараметрыЗапуска.Добавить("--force");
    
    ВыполнитьКоманду();
КонецПроцедуры

// Возвратиться к конфигурации базы данных
// Параметры:
//  ИмяРасширения - Строка - имя расширения
Процедура ВозвратитьсяККонфигурацииБазыДанных(Знач ИмяРасширения = "") Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config reset");
           
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    ПараметрыЗапуска.Добавить("--force");
    ВыполнитьКоманду();
КонецПроцедуры

// Вывести информацию о состоянии конфигурации (ConfigDumpInfo)
// Параметры:
//  ПутьКФайлуXML - Строка - Путь к файлу состояния конфигурации (ConfigDumpInfo)
//  ИмяРасширения - Строка - Имя расширения
Процедура ВыгрузитьВФайлСостояниеКонфигурации(Знач ПутьКФайлуXML, Знач ИмяРасширения = "") Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config export info");
       
    ДобавитьПараметрЕслиЗаполнен("--out", ПутьКФайлуXML);
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
       
    ВыполнитьКоманду();
КонецПроцедуры    

// Вывести информацию о изменениях конфигурации относительно переданного состояния (ConfigDumpInfo)
// Параметры:
//  ПутьКФайлуXMLИзменений - Строка - Путь к файлу для записи информации о изменениях в конфигурации
//  ПутьКФайлуXMLВыгрузки - Строка - Путь к файлу информации о конфигурации
//                           (ConfigDumpInfo) относительно которого вычисляются изменения текущей конфигурации
//  ИмяРасширения - Строка - Имя расширения
//  ВыводитьВКраткомФормате - Булево - Отображать информацию о изменениях в сокращенном виде
Процедура ВыгрузитьВФайлИзмененияКонфигурации(
    Знач ПутьКФайлуXMLИзменений,
    Знач ПутьКФайлуXMLВыгрузки,
    Знач ИмяРасширения = "",
    Знач ВыводитьВКраткомФормате = ЛОЖЬ
    ) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config export status");
           
    ДобавитьПараметрЕслиЗаполнен("--out", ПутьКФайлуXMLИзменений);
    ДобавитьПараметрЕслиЗаполнен("--base", ПутьКФайлуXMLВыгрузки);
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    Если ВыводитьВКраткомФормате Тогда
        ПараметрыЗапуска.Добавить("--short");
    КонецЕсли;    
    ВыполнитьКоманду();
КонецПроцедуры  

// Экспорт выбранных объектов конфигурации в XML
// Параметры:
//  КаталогВыгрузки - Строка - Каталог для экспорта 
//  ВыгружатьРекурсивно - Булево - Выполнять экспорт дочерних объектов.
//  Объекты - Массив - Список строк - имен объектов конфигурации для экспорта.
//  ИмяРасширения - Строка - Имя расширения
Процедура ВыгрузитьОбъектыКонфигурацииВФайлы(
    Знач КаталогВыгрузки,
    Знач ВыгружатьРекурсивно,
    Объекты,
    Знач ИмяРасширения = "") Экспорт

    Ожидаем.Что(Объекты).ИмеетТип("Массив");

    НачатьЗаполнениеПараметровЗапуска("infobase config export objects");
       
    ДобавитьПараметрЕслиЗаполнен("--out", ОбернутьВКавычки(КаталогВыгрузки));
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    Если ВыгружатьРекурсивно Тогда
        ПараметрыЗапуска.Добавить("--recursive");
    КонецЕсли;    
    Если Объекты.Количество > 0 Тогда
        Для Каждого Объект Из Объекты Цикл
            ПараметрыЗапуска.Добавить(Объект);
        КонецЦикла;
    Иначе
        ВызватьИсключение "Не заданы объекты конфигурации для экспорта в файлы!";    
    КонецЕсли;        
    ВыполнитьКоманду();
КонецПроцедуры

// Выгрузить все расширения в файлы
// Параметры:
//  КаталогВыгрузки - Строка - Каталог выгрузки расширений в файлы
Процедура ВыгрузитьВсеРасширенияВФайлы(Знач КаталогВыгрузки) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config export all-extensions");
        
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(КаталогВыгрузки));
    ВыполнитьКоманду();
КонецПроцедуры

// Экспорт конфигурации в файлы
// Параметры:
//  КаталогВыгрузки -Строка - Каталог для выгрузки конфигурации в файлы
//  ПутьКФайлуXMLВыгрузки - Строка - Путь к файлу информации о конфигурации
//        (ConfigDumpInfo) относительно которого вычисляются изменения текущей конфигурации
//  ИмяРасширения - Строка - Имя расширения
//  Синхронизировать - Булево - Синхронизировать имеющийся экспорт с конфигурацией
Процедура ВыгрузитьКонфигурациюВФайлы(
    Знач КаталогВыгрузки,
    Знач ПутьКФайлуXMLВыгрузки,
    Знач ИмяРасширения = "",
    Знач Синхронизировать = ИСТИНА
    ) Экспорт

    НачатьЗаполнениеПараметровЗапуска("infobase config export");
       
    ДобавитьПараметрЕслиЗаполнен("--base", ОбернутьВКавычки(ПутьКФайлуXMLВыгрузки));
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    Если Синхронизировать Тогда
        ПараметрыЗапуска.Добавить("--sync");
    КонецЕсли;    
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(КаталогВыгрузки));
    ВыполнитьКоманду();
КонецПроцедуры

// Загружает основную конфигурацию или расширение из файлов
// Параметры:
//  КаталогВыгрузки - Строка - Имя корневого каталога с ранее выгруженными файлами
//  ИмяРасширения - Строка - Имя расширения конфигурации. Если не заполнено, то загружать
//                           в основную конфигурацию
Процедура ЗагрузитьКонфигурациюИзФайлов(
    Знач КаталогВыгрузки,
    Знач ИмяРасширения = ""
    ) Экспорт

    НачатьЗаполнениеПараметровЗапуска("infobase config import");
       
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(КаталогВыгрузки));
    ВыполнитьКоманду();
КонецПроцедуры

// Импорт выбранных файлов конфигурации из XML
// Параметры:
//  КаталогВыгрузки - Строка - каталог выгрузки файлов
//  ВыбранныеФайлы - Массив - список файлов для загрузки
//  ИмяРасширения - Строка - имя расширения
Процедура ЗагрузитьВыбранныеФайлыКонфигурации(
    Знач КаталогВыгрузки,
    Знач ВыбранныеФайлы,
    Знач ИмяРасширения = ""
    ) Экспорт
    Ожидаем.Что(ВыбранныеФайлы).ИмеетТип("Массив");

    НачатьЗаполнениеПараметровЗапуска("infobase config import files");
       
    ДобавитьПараметрЕслиЗаполнен("--base-dir", ОбернутьВКавычки(КаталогВыгрузки));
    ДобавитьПараметрЕслиЗаполнен("--extension", ИмяРасширения, "");
    Если ВыбранныеФайлы.Количество() > 0 Тогда
        Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
            ПараметрыЗапуска.Добавить(ВыбранныйФайл);
        КонецЦикла;
    Иначе
        ВызватьИсключение "Не заданы файлы конфигурации для импорта в объекты метаданных!";    
    КонецЕсли;     
    
    ВыполнитьКоманду();

КонецПроцедуры   

// Импорт всех расширений конфигурации из XML
// Параметры:
//  КаталогВыгрузки - строка - Каталог выгрузки расширений в файлы
Процедура ЗагрузитьВсеРасширенияИзФайлов(Знач КаталогВыгрузки) Экспорт
    
    НачатьЗаполнениеПараметровЗапуска("infobase config import all-extensions");
       
    ПараметрыЗапуска.Добавить(ОбернутьВКавычки(КаталогВыгрузки));
    ВыполнитьКоманду();
КонецПроцедуры  

// Получить версию платформы 1С
// Возвращаемое значение:
//  Строка - Версия платформы 1С
Функция Версия() Экспорт
    ПараметрыЗапуска.Очистить();
    ПараметрыЗапуска.Добавить("--version");
    Версия = ВыполнитьКоманду();
    Возврат Версия;
КонецФункции    

#КонецОбласти

// Выполняет команды утилиты ibcmd
//
// Параметры:
// Возвращаемое значение:
//   Строка - результат выполнения команды на кластере 1С
//
Функция ВыполнитьКоманду()

	
	КомандаВыполнения = ПутьКПриложению;
	
	Команда = Новый Команда();
	Команда.УстановитьКоманду(КомандаВыполнения);

	Команда.ДобавитьПараметры(ПараметрыЗапуска);

	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Истина);
	КодВозврата = Команда.Исполнить();

	Если КодВозврата <> 0 Тогда
		ВызватьИсключение Команда.ПолучитьВывод();
	КонецЕсли;

	Возврат Команда.ПолучитьВывод();
	
КонецФункции

// Начать заполнение параметров запуска.
// Обеспечивает правильный порядок заполнения параметров команды.
// Параметры:
//  СтрокаКоманды - Строка - представление подкоманды пакетного запуска
Процедура НачатьЗаполнениеПараметровЗапуска(СтрокаКоманды)

    ПараметрыЗапуска.Очистить();
    ПараметрыЗапуска.Добавить(СтрокаКоманды);
    ДобавитьОбщиеПараметрыИБ();

КонецПроцедуры    

// Обернуть строку в кавычки, если это не сделано ранее
Функция ОбернутьВКавычки(Знач Строка)
    
    Если Сред(Строка,1,1) = """" И 
        Сред(Строка, СтрДлина(Строка), 1) = """" Тогда
        Результат = Строка;
    Иначе    
	    Результат = """" + Строка + """";
    КонецЕсли;    

	Возврат Результат;

КонецФункции

// Добавить параметры ИБ и параметры авторизации
// в массив параметров запуска
Процедура ДобавитьОбщиеПараметрыИБ()

    Если ПараметрыСервернойИБ.Количество() > 0 Тогда
        Для Каждого Элемент Из ПараметрыСервернойИБ Цикл
            ПараметрыЗапуска.Добавить(Элемент);
        КонецЦикла;
    ИначеЕсли ПараметрыФайловойИБ.Количество() > 0 Тогда
        Для Каждого Элемент Из ПараметрыФайловойИБ Цикл
            ПараметрыЗапуска.Добавить(Элемент);
        КонецЦикла;
    Иначе
        ВызватьИсключение "Необходимо установить общие параметры информационной базы!";                
    КонецЕсли;

    Если ПараметрыАвторизацииИБ.Количество() > 0 Тогда
        Для каждого Элемент Из ПараметрыАвторизацииИБ Цикл
            ПараметрыЗапуска.Добавить(Элемент);
        КонецЦикла;
    КонецЕсли;

КонецПроцедуры    

// Раскладывает строку с версией на компоненты
// Параметры:
//  пВерсия - Строка - Версия
// Возвращаемое значение:
//   Массив - массив чисел
//
Функция МассивКомпонентВерсии( Знач пВерсия )

	// Убираем все пробелы. Считаем "1  002" = 1002

	регулярноеВыражение = Новый РегулярноеВыражение( "\s" );
	строкаБезПробелов = регулярноеВыражение.Заменить( пВерсия, "" );

	// Вырезаем все числа. Считаем, что любой разделитель является именно
    // разделителем между компонентами, а не дробным числом, например
	регулярноеВыражение = Новый РегулярноеВыражение( "(\d+)" );

	массивСовпадений = регулярноеВыражение.НайтиСовпадения( строкаБезПробелов );

	массивКомпонент = Новый Массив;

	Для каждого цЭлемент Из массивСовпадений Цикл
		массивКомпонент.Добавить( Число( цЭлемент.Значение ) );
	КонецЦикла;

	Возврат массивКомпонент;

КонецФункции

// Сравнить две строки версий.
//  Примеры использования смотрите в тестах.
//
// Параметры:
//  ЭтаВерсия  - Строка - номер версии 
//  БольшеЧемВерсия  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число - больше 0, если ЭтаВерсия > БольшеЧемВерсия; 
//      0, если версии равны.
//      число меньше 0, если ЭтаВерсия < БольшеЧемВерсия.
//
Функция СравнитьВерсии(Знач ЭтаВерсия, Знач БольшеЧемВерсия) Экспорт
	
	Ожидаем.Что(ЭтаВерсия).ИмеетТип("Строка");
    Ожидаем.Что(БольшеЧемВерсия).ИмеетТип("Строка");
	
	компонентыЭтойВерсии = МассивКомпонентВерсии( ЭтаВерсия );
	компонентыДругойВерсии = МассивКомпонентВерсии( БольшеЧемВерсия );

	// Выравниваем количество компонент

	вГраница = Макс( компонентыЭтойВерсии.Количество(), компонентыДругойВерсии.Количество() ) - 1;

	Для ц = компонентыЭтойВерсии.Количество() - 1 По ВГраница Цикл
		компонентыЭтойВерсии.Добавить(0);
	КонецЦикла;

	Для ц = компонентыДругойВерсии.Количество() - 1 По ВГраница Цикл
		компонентыДругойВерсии.Добавить(0);
	КонецЦикла;

	результат = 0;

	Для ц = 0 По вГраница Цикл

		Если компонентыЭтойВерсии[ц] > компонентыДругойВерсии[ц] Тогда
			результат = 1;
			Прервать;
		ИначеЕсли компонентыЭтойВерсии[ц] < компонентыДругойВерсии[ц] Тогда
			результат = -1;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат результат;

КонецФункции

// Добавить параметр запуска, если заполнено его значение
// Параметры:
//  ИмяПараметра - Строка - Имя добавляемого параметра;
//  ЗначениеПараметра - Строка - Значение добавляемого параметра;
//  ЗначениеПоУмолчанию - Любой - Значение по умолчанию добавляемого параметра;
//
Процедура ДобавитьПараметрЕслиЗаполнен(
    Знач ИмяПараметра,
    Знач ЗначениеПараметра,
    Знач ЗначениеПоУмолчанию = Неопределено)
    Ожидаем.Что(ИмяПараметра).ИмеетТип("Строка");
    Если ЗначениеПараметра <> ЗначениеПоУмолчанию Тогда
        Ожидаем.Что(ЗначениеПараметра).ИмеетТип("Строка");
        Параметр = ИмяПараметра + "=%1";
        ПараметрыЗапуска.Добавить(СтрШаблон(Параметр, ЗначениеПараметра));
    КонецЕсли;    
КонецПроцедуры   

// Получить имя лога продукта
//
// Возвращаемое значение:
//  Строка   - имя лога продукта
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.ibcmdrunner";
КонецФункции

// Инициализация работы библиотеки.
// Задает минимальные настройки.
//
Процедура ПриСозданииОбъекта()

    Лог = Логирование.ПолучитьЛог(ИмяЛога());

    СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;

	ПараметрыЗапуска = Новый Массив;
    ПараметрыСервернойИБ = Новый Массив;
    ПараметрыФайловойИБ = Новый Массив;
    ПараметрыАвторизацииИБ = Новый Массив;

    ПутьКПриложению = СтрЗаменить(Платформа1С.ПутьКПредприятию("8.3"), "1cv8", "ibcmd");
    Версия();
КонецПроцедуры